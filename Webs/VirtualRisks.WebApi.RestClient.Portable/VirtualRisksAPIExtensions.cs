// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace VirtualRisks.WebApi.RestClient
{
    using Models;
    using System.Threading;
    using System.Threading.Tasks;

    /// <summary>
    /// Extension methods for VirtualRisksAPI.
    /// </summary>
    public static partial class VirtualRisksAPIExtensions
    {
            /// <summary>
            /// get users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='query'>
            /// </param>
            public static object Paging(this IVirtualRisksAPI operations, int? page = default(int?), int? take = default(int?), string query = default(string))
            {
                return operations.PagingAsync(page, take, query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// get users
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> PagingAsync(this IVirtualRisksAPI operations, int? page = default(int?), int? take = default(int?), string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.PagingWithHttpMessagesAsync(page, take, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Get user by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object GetById(this IVirtualRisksAPI operations, string id)
            {
                return operations.GetByIdAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Get user by id
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> GetByIdAsync(this IVirtualRisksAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.GetByIdWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Edit
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            public static object Edit(this IVirtualRisksAPI operations, string id, UserDto model)
            {
                return operations.EditAsync(id, model).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Edit
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='model'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> EditAsync(this IVirtualRisksAPI operations, string id, UserDto model, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.EditWithHttpMessagesAsync(id, model, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Delete user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            public static object Delete(this IVirtualRisksAPI operations, string id)
            {
                return operations.DeleteAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Delete user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeleteAsync(this IVirtualRisksAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeleteWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Active user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User id
            /// </param>
            public static object Active(this IVirtualRisksAPI operations, string id)
            {
                return operations.ActiveAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Active user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> ActiveAsync(this IVirtualRisksAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.ActiveWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Active user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User id
            /// </param>
            public static object Deactive(this IVirtualRisksAPI operations, string id)
            {
                return operations.DeactiveAsync(id).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Active user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User id
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> DeactiveAsync(this IVirtualRisksAPI operations, string id, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.DeactiveWithHttpMessagesAsync(id, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Active user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User id
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='token'>
            /// </param>
            public static object SyncFriend(this IVirtualRisksAPI operations, string id, string provider, string token)
            {
                return operations.SyncFriendAsync(id, provider, token).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Active user
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// User id
            /// </param>
            /// <param name='provider'>
            /// </param>
            /// <param name='token'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> SyncFriendAsync(this IVirtualRisksAPI operations, string id, string provider, string token, CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.SyncFriendWithHttpMessagesAsync(id, provider, token, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

            /// <summary>
            /// Friends
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='query'>
            /// </param>
            public static object Friends(this IVirtualRisksAPI operations, string id, int page, int take, string query = default(string))
            {
                return operations.FriendsAsync(id, page, take, query).GetAwaiter().GetResult();
            }

            /// <summary>
            /// Friends
            /// </summary>
            /// <param name='operations'>
            /// The operations group for this extension method.
            /// </param>
            /// <param name='id'>
            /// </param>
            /// <param name='page'>
            /// </param>
            /// <param name='take'>
            /// </param>
            /// <param name='query'>
            /// </param>
            /// <param name='cancellationToken'>
            /// The cancellation token.
            /// </param>
            public static async Task<object> FriendsAsync(this IVirtualRisksAPI operations, string id, int page, int take, string query = default(string), CancellationToken cancellationToken = default(CancellationToken))
            {
                using (var _result = await operations.FriendsWithHttpMessagesAsync(id, page, take, query, null, cancellationToken).ConfigureAwait(false))
                {
                    return _result.Body;
                }
            }

    }
}
