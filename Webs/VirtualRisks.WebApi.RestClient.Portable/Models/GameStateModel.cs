// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace VirtualRisks.WebApi.RestClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class GameStateModel
    {
        /// <summary>
        /// Initializes a new instance of the GameStateModel class.
        /// </summary>
        public GameStateModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the GameStateModel class.
        /// </summary>
        /// <param name="status">Possible values include: 'Requesting',
        /// 'Playing', 'Rejected', 'Ended'</param>
        /// <param name="speed">Possible values include: 'UltraFast', 'Fast',
        /// 'Speedy', 'Normal', 'Slow', 'UltraSlow'</param>
        /// <param name="difficulty">Possible values include: 'Easy', 'Normal',
        /// 'Hard'</param>
        public GameStateModel(System.Guid? id = default(System.Guid?), IList<CastleStateModel> castles = default(IList<CastleStateModel>), string status = default(string), bool? hasError = default(bool?), int? streamRevision = default(int?), IList<EventBaseModel> events = default(IList<EventBaseModel>), IList<BattalionMovementEventModel> battalionMovements = default(IList<BattalionMovementEventModel>), string userId = default(string), string userHeroId = default(string), string opponentId = default(string), string opponentHeroId = default(string), bool? selfPlaying = default(bool?), string speed = default(string), string difficulty = default(string), double? userCoins = default(double?), double? opponentCoins = default(double?), IList<string> userProducedTroopTypes = default(IList<string>), IList<SoldierModel> userSoldiers = default(IList<SoldierModel>), IList<SoldierModel> opponentSoldiers = default(IList<SoldierModel>))
        {
            Id = id;
            Castles = castles;
            Status = status;
            HasError = hasError;
            StreamRevision = streamRevision;
            Events = events;
            BattalionMovements = battalionMovements;
            UserId = userId;
            UserHeroId = userHeroId;
            OpponentId = opponentId;
            OpponentHeroId = opponentHeroId;
            SelfPlaying = selfPlaying;
            Speed = speed;
            Difficulty = difficulty;
            UserCoins = userCoins;
            OpponentCoins = opponentCoins;
            UserProducedTroopTypes = userProducedTroopTypes;
            UserSoldiers = userSoldiers;
            OpponentSoldiers = opponentSoldiers;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public System.Guid? Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "castles")]
        public IList<CastleStateModel> Castles { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Requesting', 'Playing',
        /// 'Rejected', 'Ended'
        /// </summary>
        [JsonProperty(PropertyName = "status")]
        public string Status { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "hasError")]
        public bool? HasError { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "streamRevision")]
        public int? StreamRevision { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<EventBaseModel> Events { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "battalionMovements")]
        public IList<BattalionMovementEventModel> BattalionMovements { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userId")]
        public string UserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userHeroId")]
        public string UserHeroId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "opponentId")]
        public string OpponentId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "opponentHeroId")]
        public string OpponentHeroId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "selfPlaying")]
        public bool? SelfPlaying { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'UltraFast', 'Fast',
        /// 'Speedy', 'Normal', 'Slow', 'UltraSlow'
        /// </summary>
        [JsonProperty(PropertyName = "speed")]
        public string Speed { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Easy', 'Normal', 'Hard'
        /// </summary>
        [JsonProperty(PropertyName = "difficulty")]
        public string Difficulty { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userCoins")]
        public double? UserCoins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "opponentCoins")]
        public double? OpponentCoins { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userProducedTroopTypes")]
        public IList<string> UserProducedTroopTypes { get; private set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "userSoldiers")]
        public IList<SoldierModel> UserSoldiers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "opponentSoldiers")]
        public IList<SoldierModel> OpponentSoldiers { get; set; }

    }
}
