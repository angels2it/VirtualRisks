// <auto-generated>
// Code generated by Microsoft (R) AutoRest Code Generator.
// Changes may cause incorrect behavior and will be lost if the code is
// regenerated.
// </auto-generated>

namespace VirtualRisks.WebApi.RestClient.Models
{
    using Newtonsoft.Json;
    using System.Collections;
    using System.Collections.Generic;
    using System.Linq;

    public partial class DetailCastleStateModel
    {
        /// <summary>
        /// Initializes a new instance of the DetailCastleStateModel class.
        /// </summary>
        public DetailCastleStateModel()
        {
            CustomInit();
        }

        /// <summary>
        /// Initializes a new instance of the DetailCastleStateModel class.
        /// </summary>
        /// <param name="productionState">Possible values include: 'OnGoing',
        /// 'Suspended'</param>
        /// <param name="currentUserArmy">Possible values include: 'Neutrual',
        /// 'Red', 'Blue'</param>
        /// <param name="army">Possible values include: 'Neutrual', 'Red',
        /// 'Blue'</param>
        public DetailCastleStateModel(HeroModel owner = default(HeroModel), UserModel ownerUser = default(UserModel), IList<SoldierModel> soldiers = default(IList<SoldierModel>), int? streamRevision = default(int?), IList<EventBaseModel> events = default(IList<EventBaseModel>), bool? canProductionSoldier = default(bool?), IList<HeroStateModel> heroes = default(IList<HeroStateModel>), double? revenue = default(double?), string revenueTime = default(string), string upkeepTime = default(string), bool? isNotEnoughCoinForProduction = default(bool?), string currentTroopType = default(string), IList<CastleTroopTypeModel> availableTroopTypes = default(IList<CastleTroopTypeModel>), bool? canChangeTroopType = default(bool?), string produceTroopType = default(string), string productionState = default(string), double? strength = default(double?), string currentUserArmy = default(string), bool? canUpgrade = default(bool?), string id = default(string), string name = default(string), int? soldiersAmount = default(int?), CastleTroopTypeModel castleTroopType = default(CastleTroopTypeModel), System.DateTime? produceExecuteAt = default(System.DateTime?), PositionModel position = default(PositionModel), string army = default(string), string ownerUserId = default(string), string ownerId = default(string), SiegeStateModel siege = default(SiegeStateModel))
        {
            Owner = owner;
            OwnerUser = ownerUser;
            Soldiers = soldiers;
            StreamRevision = streamRevision;
            Events = events;
            CanProductionSoldier = canProductionSoldier;
            Heroes = heroes;
            Revenue = revenue;
            RevenueTime = revenueTime;
            UpkeepTime = upkeepTime;
            IsNotEnoughCoinForProduction = isNotEnoughCoinForProduction;
            CurrentTroopType = currentTroopType;
            AvailableTroopTypes = availableTroopTypes;
            CanChangeTroopType = canChangeTroopType;
            ProduceTroopType = produceTroopType;
            ProductionState = productionState;
            Strength = strength;
            CurrentUserArmy = currentUserArmy;
            CanUpgrade = canUpgrade;
            Id = id;
            Name = name;
            SoldiersAmount = soldiersAmount;
            CastleTroopType = castleTroopType;
            ProduceExecuteAt = produceExecuteAt;
            Position = position;
            Army = army;
            OwnerUserId = ownerUserId;
            OwnerId = ownerId;
            Siege = siege;
            CustomInit();
        }

        /// <summary>
        /// An initialization method that performs custom operations like setting defaults
        /// </summary>
        partial void CustomInit();

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "owner")]
        public HeroModel Owner { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerUser")]
        public UserModel OwnerUser { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "soldiers")]
        public IList<SoldierModel> Soldiers { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "streamRevision")]
        public int? StreamRevision { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "events")]
        public IList<EventBaseModel> Events { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canProductionSoldier")]
        public bool? CanProductionSoldier { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "heroes")]
        public IList<HeroStateModel> Heroes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "revenue")]
        public double? Revenue { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "revenueTime")]
        public string RevenueTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "upkeepTime")]
        public string UpkeepTime { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "isNotEnoughCoinForProduction")]
        public bool? IsNotEnoughCoinForProduction { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "currentTroopType")]
        public string CurrentTroopType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "availableTroopTypes")]
        public IList<CastleTroopTypeModel> AvailableTroopTypes { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canChangeTroopType")]
        public bool? CanChangeTroopType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "produceTroopType")]
        public string ProduceTroopType { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'OnGoing', 'Suspended'
        /// </summary>
        [JsonProperty(PropertyName = "productionState")]
        public string ProductionState { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "strength")]
        public double? Strength { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Neutrual', 'Red', 'Blue'
        /// </summary>
        [JsonProperty(PropertyName = "currentUserArmy")]
        public string CurrentUserArmy { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "canUpgrade")]
        public bool? CanUpgrade { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "id")]
        public string Id { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "name")]
        public string Name { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "soldiersAmount")]
        public int? SoldiersAmount { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "castleTroopType")]
        public CastleTroopTypeModel CastleTroopType { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "produceExecuteAt")]
        public System.DateTime? ProduceExecuteAt { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "position")]
        public PositionModel Position { get; set; }

        /// <summary>
        /// Gets or sets possible values include: 'Neutrual', 'Red', 'Blue'
        /// </summary>
        [JsonProperty(PropertyName = "army")]
        public string Army { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerUserId")]
        public string OwnerUserId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "ownerId")]
        public string OwnerId { get; set; }

        /// <summary>
        /// </summary>
        [JsonProperty(PropertyName = "siege")]
        public SiegeStateModel Siege { get; set; }

    }
}
